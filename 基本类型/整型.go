package main

import "fmt"

func main() {
	var u uint8 = 255
	/*
		u 			11111111
		u + 1 		00000000	高位抛弃
		u * u		二进制数乘法，高位抛弃
	*/
	fmt.Println(u, u+1, u*u)
	fmt.Printf("%08b, %08b, %08b\n", u, u+1, u*u)

	var i int8 = 127
	/*
		i 			01111111	【正数的反码、补码就是原码本身】
		i + 1       10000000	反码【1111111】原码【10000000】= 128，再加负号
		i + 1 + 1   10000001    反码【0000000】原码【1111111】= 127，再加负号
	*/
	fmt.Println(i, i+1, i+1+1)
	fmt.Printf("%08b, %08b, %08b\n", i, i+1, i+1+1)

	var x uint8 = 1<<1 | 1<<5 // 00000010 | 00100000 = 00100010
	var y uint8 = 1<<1 | 1<<2 // 00000010 | 00000100 = 00000110
	fmt.Printf("%d:%08[1]b, %d:%08[2]b\n", x, y)
	fmt.Printf("%d:%08[1]b\n", x&y) // 00100010 & 00000110 = 00000010
	fmt.Printf("%d:%08[1]b\n", x^y) // 00100010 ^ 00000110 = 00100100	异或
	fmt.Printf("%d:%08[1]b\n", ^y)  // ^ 00000110 = 11111001 取反
}
